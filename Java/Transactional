
# [Spring Transaction]

## [1. Transaction 의 이해]

여러 작업을 진행하다가 문제가 생겼을 경우 이전 상태로 rollback 하기 위해 사용되는 것이 Transaction입니다.
Transaction은 더 이상 쪼갤 수 없는 최소 작업 단위를 의미합니다.
Transaction은 2가지의 작업으로만 마무리가 됩니다.

    a) Transaction commit : 작업이 성공적으로 마무리 됨.

    b) Transaction rollback : 작업을 취소하고 이전의 상태로 되돌림

## [2. Spring이 제공하는 Transaction]

Spring은 Transaction과 관련된 3가지 기술을 제공합니다.

    a) Transation 동기화

    b) Transaction 추상화

    c) AOP를 이용한 Transaction 분리

- Transaction 동기화
    Transaction 동기화는 Transaction을 시작하기 위한 Connection 객체를 특별한 저장소에 보관해두고 필요할 때 꺼내쓸 수 있도록 하는
    기술입니다. 동기화는 Transaction을 시작하기 위한 Connection 객체를 독립적으로 관리하기 때문에, 멀티쓰레드 환경에서도 충돌하지
    않습니다. 그러나 동기화만 사용한다면, 기술에 종속되는 단점이 있습니다. (JDBC, JPA 등)

- Transaction 추상화
    Spring은 Transaction 기술의 공통점을 담은 Transaction 추상화 기술을 제공하고 있다. 
    이를 통해 Appliacation에 각 기술마다(JDBC, JPA 등) 종속적인 코드를 이용하지 않고도 일관되게 Transaction을 처리할 수 있도록
    도와줍니다.

![Transaction](./images/Transaction1.png)

- Transaction AOP
    Transaction 관리 코드가 비즈니스 로직코드와 결합되면 코드는 2가지 책임을 갖게 되는데, 이러한 부분을 해결하기위해 AOP를 이용하여
    Transaction을 분리 합니다. 이를 적용한 Transaction관리 코드를 Spring에서는 트랜잭션 어노테이션 (@Transactional)을 지원합니다. 
    @Transactional을 이용하면 Transaction 속성을 메소드 단위로 다르게 지정할 수 있어 세밀한 속성 제어가 가능하며, 
    직관적으로 이해가 됩니다. 

## [3. Spring Transaction이 제공하는 Annotation의 세부속성에 관해]

<strong>3.1. Transaction 롤백(rollbackFor, noRollbackFor)</strong> 
> 설정을 하지 않는다면 스프링이 Default로 롤백을 잡고 있지만, rollbackFor 설정을 잡지 않았을 경우 checkedExcetpion인 SQLException과 IOException은 Default로 관리하지 않기 때문에 롤백이 되지 않는 경우를 방지하기 위해 아래와 같이 rollbackFor=Exception.class 설정을 통해 이를 방지할 수 있습니다. 롤백 대상의 예외를 지정하기 위해서는 noRollbackFor 를 이용할 수 있습니다.

```java
   	@Transactional(value = "transactionManager", propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public void deleteProductComment(ProductCommentDeleteReqVo param) {
		for(ProductCommentDeleteReqVo vo : param.getCommentList()) {
			ProductCommentRq rq = modelMapper.map(vo, ProductCommentRq.class);
			bizProductWmMapper.삭제_상품평(rq);
		}
	} 

```

<br>
<strong>3.2. Transaction 전파(Propagation)</strong>

> Spring이 Transaction을 어떻게 진행시킬지에 대해 결정하도록 전파 속성을 전달해야 합니다. Spring이 지원하는 전파 속성은 
아래와 같이 7가지 속성으로 구성되어 있습니다.

```
    - REQUIRED
        * Default로 모든 Transaction 매니저가 지원합니다.
        * 이미 시작된 Transaction이 있으면 참여하고 없으면 새로 시작합니다.
        * 하나의 Transaction이이 시작된 후 다른 Transaction 경계가 설정된 메소드를 호출하면 같은 Transaction으로로 묶입니다.
        
    - SUPPORTS
        * 이미 시작된 Transaction이이 있으면 참여하고, 그렇지 않으면 Transaction 없이 진행합니다.
        * Transaction이이 없어도 해당 경계 안에서 Connection 객체나 하이버네이트의 Session 등은 공유 할 수 있습니다.

    - MANDATORY
        * 이미 시작된 트랜잭션이 있으면 참여하고, 없으면 새로 시작하는 대신 없으면 예외를 발생시킵니다.
        * MANDATORY는 혼자서 독립적으로 트랜잭션을 진행하면 안되는 경우에 사용합니다.

    - REQUIRES_NEW
        * 항상 새로운 트랜잭션을 시작해야 하는 경우에 사용합니다.
        * 이미 진행중인 트랜잭션이 있으면 이를 보류시키고 새로운 트랜잭션을 만들어 시작합니다.

    - NOT_SUPPORTED
        * 이미 진행중인 트랜잭션이 있으면 이를 보류시키고, 트랜잭션을 사용하지 않도록 합니다.

    - NEVER
        * 이미 진행중인 트랜잭션이 있으면 예외를 발생시키며, 트랜잭션을 사용하지 않도록 강제합니다.

    - NESTED
        * 이미 진행중인 트랜잭션이 있으면 중첩(자식) 트랜잭션을 시작합니다.
        * 중첩 트랜잭션은 트랜잭션 안에 다시 트랜잭션을 만드는 것으로, 독립적인 트랜잭션을 만드는 REQUIRES_NEW와는 다릅니다.
        * NESTED에 의한 중첩 트랜잭션은 먼저 시작된 부모 트랜잭션의 커밋과 롤백에는 영향을 받지만, 자신의 커밋과 롤백은 부모 트랜잭션에게 
        영향을 주지 않습니다.
```

<br>
<strong>3.3. Transaction 읽기 전용(readOnly)</strong>

> 성능 최적화와 쓰기 방지의 목적으로 사용됩니다.

```
    - 읽기 전용으로 설정함으로써 성능을 최적화합니다.
    - 쓰기 작업이 일어나는 것을 의도적으로 방지합니다.
```
<br>
<strong>3.4. Transaction 격리 수준(Isolation)</strong>

> 동시에 여러 Transaction이 진행될 때 Transaction의 작업 결과를 타 Transaction에게 어떻게 노출할 것인지를 결정합니다. 
Spring은 아래와같이 5가지의 속성을 지원합니다.
```
    - DEFAULT
        * 사용하는 데이터 액세스 기술 또는 DB 드라이버의 디폴트 설정을 따르게 됩니다.
        * 일반적으로 드라이버의 격리 수준은 DB의 격리 수준을 따르며, 대부분의 DB는 READ_COMMITED를 기본 격리수준으로 가지게 됩니다.
        * 일부 DB는 디폴트 값이 다른 경우도 있으므로 DEFAULT를 사용할 때는 드라이버와 DB의 문서를 참고해서 기본 격리수준을 확인해야 
        합니다.

    - READ_UNCOMMITTED
        * 가장 낮은 격리수준으로써 하나의 트랜잭션이 커밋되기 전에 그 변화가 다른 트랜잭션에 그대로 노출되는 문제가 있습니다.
        * 하지만 가장 빠르기 때문에 데이터의 일관성이 조금 떨어지더라도 성능을 극대화할 때 의도적으로 사용합니다.

    - READ_COMMITTED
        * Spring은 기본 속성이 DEFAULT이며, DB는 일반적으로 READ_COMMITED가 기본 속성이므로 가장 많이 사용됩니다.
        * READ_UNCOMMITTED와 달리 다른 트랜잭션이 커밋하지 않은 정보는 읽을 수 없습니다.
        * 대신 하나의 트랜잭션이 읽은 로우를 다른 트랜잭션이 수정할 수 있어서 처음 트랜잭션이 같은 로우를 다시 읽을 때 다른 내용이 발견될 
        수 있습니다.

    - REPEATABLE_READ
        * 하나의 트랜잭션이 읽은 로우를 다른 트랜잭션이 수정할 수 없도록 막아주지만 새로운 로우를 추가하는 것은 막지 않습니다.
        * 따라서 SELECT로 조건에 맞는 로우를 전부 가져오는 경우 트랜잭션이 끝나기 전에 추가된 로우가 발견될 수 있습니다.

    - SERIALIZABLE
        * 가장 강력한 트랜잭션 격리 수준으로, 이름 그대로 트랜잭션을 순차적으로 진행시켜줍니다.
        * SERIALIZABLE은 여러 트랜잭션이 동시에 같은 테이블의 정보를 액세스할 수 없습니다.
        * SERIALIZABLE은 가장 안전하지만 가장 성능이 떨어지므로 극단적으로 안전한 작업이 필요한 경우가 아니라면 사용해서는 안됩니다.
```
<br>
<strong>3.5. Transaction 제한 시간(timeout)</strong>

> Transaction에 제한시간을 지정할 수 있습니다. 초 단위로 지정이 가능하며 문자열 지정을 원할경우 timeoutString을 사용하면 됩니다.

<br>

## Project 내 Spring Transaction 사용 예시

1. Transaction의 서비스 단위
    - Transaction을 서비스 단위로 속성을 지정하여 사용한 예시입니다.
    - 대부분의 Transaction 속성 설정은 Propagation REQUIRED면 충분합니다.
```java

	/**
	 * 
	 * 웹관리> 게시판관리 > 상품평 상세 정보 조회
	 * @param param
	 * @return ProductCommentResVo 상품평 상세 정보
	 */
	public ProductCommentResVo getProductCommentMaster(String masterCode, Integer comSeq) {
		ProductCommentResVo resVo = new ProductCommentResVo();
		ProductCommentRs list = null;
		ProductCommentReqVo proCommentReqVo = new ProductCommentReqVo();
		
		proCommentReqVo.setMasterCode(masterCode);
		proCommentReqVo.setComSeq(comSeq);
		
		ProductCommentRq proCommentRq = modelMapper.map(proCommentReqVo, ProductCommentRq.class);
		list = bizProductWmMapper.USP_PRO_COMMENT_SELECT(proCommentRq);
		resVo = modelMapper.map(list,ProductCommentResVo.class);
		return resVo;
	}

	/**
	 * 웹관리 > 게시판관리 > 상품평 등록/수정
	 * @param session 로그인 세션 정보
	 * @param proCommentReqVo 상품평 등록 정보
	 */
        @Transactional(value="transactionManager", propagation= Propagation.REQUIRED, rollbackFor=Exception.class)
	public void registerProductComment(ProductCommentReqVo proCommentReqVo) {
		ProductCommentRq proCommentRq = modelMapper.map(proCommentReqVo, ProductCommentRq.class);
		
		if(ObjectUtils.isNotEmpty(proCommentRq.getComSeq())) {
			if(proCommentRq.getComSeq() > 0) {
				bizProductWmMapper.수정_상품평(proCommentRq);
			} else {
				throw new ServiceRuntimeVgtException("상품평 수정을 실패하였습니다.");
			}
		} else {
			bizProductWmMapper.입력_상품평(proCommentRq);
		}
	}

	@Transactional(value = "transactionManager", propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public void deleteProductComment(ProductCommentDeleteReqVo param) {
		for(ProductCommentDeleteReqVo vo : param.getCommentList()) {
			ProductCommentRq rq = modelMapper.map(vo, ProductCommentRq.class);
			bizProductWmMapper.삭제_상품평(rq);
		}
	}
```

2. Transaction의 Service내 개별 Method 단위 지정
    - Transaction의 서비스 내 개별 Method 단위로 속성을 지정하여 사용한 예시입니다.
    - Method 단위로 Transactional Annotation을 이용하여 적용되었지만 Propagation REQUIRED 속성 지정으로 상위 Method에서 이미 시작된 Transactio에 참여하게 되어 개별 작업 단위로 rollback이 일어나지는 않습니다.
![Transaction](./images/Transaction4.png)

3. Transaction의 Service내 대상에서 예외 무시 사례
    - Transaction의 서비스 내 특정 행동에 대해서 롤백을 시키지 않도록 제외시키기 위해 noRollbackFor를 사용하는 예시입니다.
```java
	@Transactional(value="transactionManager", propagation= Propagation.REQUIRED, noRollbackFor=Exception.class)
	public String deleteTest(String code, int seq) {
		String result = "";

		try {
			testMapper.DELETE_PKG_TEST(code, seq);
		} catch (Exception ex) {
			result = ex.getMessage();
		}
		return result;
	}
    
```

4. Transactional과 try-catch
    - Transactional을 선언하였지만, try-catch 구문의 사용으로 모든 예외(예외의 최상위 계층인 Exception을 catch함)를 처리하도록 정의 했기 때문에 발생하는 모든 예외는 catch블록에서 처리가 됩니다. try-catch를 통해 예외처리를 했을 경우에는 rollbackFor을 설정하더라도 적용이 되지 않기 때문에 catch내에서 강제로 throw를 해주어야 롤백이 적용됩니다.
```java
    /**
    * 알림톡 SMS 등록
   * @param reqAlimSms
   * @return
   */
    @Transactional(value="transactionSendDbManager", propagation= Propagation.NOT_SUPPORTED, rollbackFor=Exception.class)
    public int sendSms(SendAlimSmsRq reqAlimSms) {
    
        int retCnt = -1;
    
        try {
            retCnt = bizAlimTalkGwMapper.저장_SMS_발송_메시지(reqAlimSms);
        }catch(Exception ex) {
            if(logger.isErrorEnabled())logger.error("알림톡 SMS 등록", ex);
        }
    
        return retCnt;
    }
```
- Transactional과 try-catch rollback 적용 사례

```java
    /**
    * 알림톡 SMS 등록
   * @param reqAlimSms
   * @return
   */
    @Transactional(value="transactionSendDbManager", propagation= Propagation.NOT_SUPPORTED, rollbackFor=Exception.class)
    public int sendSms(SendAlimSmsRq reqAlimSms) {
    
        int retCnt = -1;
    
        try {
            retCnt = bizAlimTalkGwMapper.저장_SMS_발송_메시지(reqAlimSms);
        }catch(Exception ex) {
            if(logger.isErrorEnabled())logger.error("알림톡 SMS 등록", ex);
            throw new Exception(String.format("bizAlimTalkGwMapper.저장_SMS_발송_메시지 오류 : %s", reqAlimSms))
        }
    
        return retCnt;
    }
```


